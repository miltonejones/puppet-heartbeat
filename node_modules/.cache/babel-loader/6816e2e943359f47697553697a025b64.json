{"ast":null,"code":"var _jsxFileName = \"/home/miltonejones/projects/puppet-heartbeat/src/components/SocketSender.js\";\nimport React from 'react';\nimport { Button, Stack, Typography, Box, LinearProgress, Collapse, Divider } from '@mui/material';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport Grid from '@mui/material/Grid';\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport StepLabel from '@mui/material/StepLabel';\nimport Card from '@mui/material/Card';\nimport SocketCard from './SocketCard';\nimport { PlayCircle, Sync } from '@mui/icons-material'; // import StepContent from '@mui/material/StepContent';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SOCKET_URI = 'wss://2zoxhl25v2.execute-api.us-east-1.amazonaws.com/production';\nlet client = new WebSocket(SOCKET_URI);\n\nclass SocketSender extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      connected: false,\n      ws: null,\n      data: null,\n      showTextbox: true,\n      outcomes: []\n    };\n    this.openListener = this.openListener.bind(this);\n    this.messageListener = this.messageListener.bind(this);\n    this.closeListener = this.closeListener.bind(this);\n    this.sendCommand = this.sendCommand.bind(this);\n  }\n\n  onComplete() {\n    alert('DONE!');\n  }\n\n  messageListener(msg) {\n    const {\n      data\n    } = msg;\n    const json = JSON.parse(data); // if (!(json?.available || json?.message)) return console.log(json);\n\n    const {\n      available,\n      steps,\n      data: socketData\n    } = json; // console.log({ json });\n\n    !!json && !!available && this.setState({ ...json,\n      tests: available === null || available === void 0 ? void 0 : available.split(',')\n    });\n    !!json && !!steps && this.setState({ ...json,\n      outcomes: [],\n      steps: steps === null || steps === void 0 ? void 0 : steps.split(',')\n    });\n    !!json && !!(socketData !== null && socketData !== void 0 && socketData.message) && this.setState({ ...socketData\n    });\n    !!(socketData !== null && socketData !== void 0 && socketData.s3Location) && this.setState({ ...this.state,\n      outcomes: this.state.outcomes.concat(socketData)\n    });\n    !!json.complete && this.onComplete();\n  }\n\n  closeListener() {\n    console.log('You are disconnected.');\n    this.setState({\n      connected: false,\n      ws: null,\n      readyState: client.readyState\n    });\n\n    if (this.state.logout) {\n      return console.log('Reconnection will not be attempted');\n    }\n\n    this.retryConnection();\n  }\n\n  openListener() {\n    console.log('You are connected');\n    this.setState({\n      ws: client,\n      connected: true\n    });\n    this.sendMessage({\n      action: 'introduce',\n      data: {\n        type: 'agent'\n      }\n    });\n  }\n\n  sendMessage(json) {\n    console.log('sending', json);\n    client.send(JSON.stringify(json));\n  }\n\n  sendCommand(id) {\n    this.sendMessage({\n      action: 'exec',\n      data: {\n        id\n      }\n    });\n    this.setState({\n      clicked: 1,\n      complete: !1,\n      downloadIndex: 0\n    });\n  }\n\n  retryConnection() {\n    setTimeout(() => {\n      console.log('Retrying connection...');\n      client = new WebSocket(SOCKET_URI);\n      this.mountClient();\n    }, 5000);\n  }\n\n  componentWillUnmount() {\n    console.log('Disconnecting.');\n    this.sendMessage({\n      action: 'disconnect'\n    });\n  }\n\n  mountClient() {\n    client.addEventListener('open', this.openListener);\n    client.addEventListener('message', this.messageListener);\n    client.addEventListener('close', this.closeListener);\n  }\n\n  componentDidMount() {\n    this.mountClient();\n  }\n\n  render() {\n    const {\n      tests,\n      message,\n      thumbnail,\n      steps,\n      activeStep = 0,\n      progress,\n      outcomes,\n      connected,\n      currentTest\n    } = this.state;\n    const execRunning = !!progress && progress < 100;\n    const execDisabled = !currentTest || execRunning;\n    const headerText = !connected ? 'Waiting to connect...' : 'Select a test to run.';\n    const ButtonIcon = execRunning ? Sync : PlayCircle;\n    const buttonClass = execRunning ? 'spin' : '';\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        className: \"card-body flex\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          ml: 2,\n          children: headerText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            flexGrow: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TestSelect, {\n          value: currentTest,\n          onChange: e => this.setState({\n            currentTest: e\n          }),\n          testList: tests\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => this.sendCommand(currentTest),\n          disabled: execDisabled,\n          sx: {\n            mr: 3\n          },\n          variant: \"contained\",\n          color: \"error\",\n          children: [\"Run \", /*#__PURE__*/_jsxDEV(ButtonIcon, {\n            className: buttonClass,\n            sx: {\n              ml: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: \"card-body\",\n        sx: {\n          minHeight: 300\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Typography, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            className: \"flex center middle\",\n            xs: 5,\n            sx: {\n              textAlign: 'center'\n            },\n            children: [!steps && /*#__PURE__*/_jsxDEV(Typography, {\n              mt: 4,\n              variant: \"subtitle1\",\n              children: \"No test is loaded.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, this), !!steps && !thumbnail && /*#__PURE__*/_jsxDEV(Typography, {\n              mt: 4,\n              variant: \"subtitle1\",\n              children: \"Waiting for first image...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 17\n            }, this), !!thumbnail && /*#__PURE__*/_jsxDEV(Stack, {\n              mt: 4,\n              className: \"preview-stack\",\n              children: [/*#__PURE__*/_jsxDEV(Box, {\n                className: \"preview-head\",\n                children: [/*#__PURE__*/_jsxDEV(Box, {\n                  className: \"dot\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  className: \"dot green\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  className: \"dot gold\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  ml: 1,\n                  variant: \"caption\",\n                  children: \"Test Preview\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                className: \"preview-body\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  style: {\n                    width: 300,\n                    height: 168\n                  },\n                  src: 'data:image/png;base64,' + thumbnail,\n                  alt: \"thumb\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            pt: 5,\n            xs: 2,\n            children: /*#__PURE__*/_jsxDEV(Stepper, {\n              mt: 5,\n              activeStep: activeStep,\n              orientation: \"vertical\",\n              children: steps === null || steps === void 0 ? void 0 : steps.map((label, index) => /*#__PURE__*/_jsxDEV(Step, {\n                children: /*#__PURE__*/_jsxDEV(StepLabel, {\n                  children: label\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 21\n                }, this)\n              }, label, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            p: 5,\n            xs: 5,\n            children: [message, !!progress && /*#__PURE__*/_jsxDEV(Box, {\n              mt: 6,\n              children: /*#__PURE__*/_jsxDEV(LinearProgress, {\n                variant: \"determinate\",\n                value: progress\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), !!outcomes.length && /*#__PURE__*/_jsxDEV(Collapse, {\n          in: progress > 95,\n          children: [/*#__PURE__*/_jsxDEV(Divider, {\n            sx: {\n              mt: 4,\n              mb: 4\n            },\n            children: \"Test Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            className: \"auto-grid\",\n            children: outcomes.map((outcome, i) => /*#__PURE__*/_jsxDEV(SocketCard, { ...outcome\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default SocketSender;\n\nfunction TestSelect(_ref) {\n  let {\n    testList,\n    value,\n    onChange\n  } = _ref;\n  if (!testList) return /*#__PURE__*/_jsxDEV(\"i\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(FormControl, {\n      sx: {\n        m: 1,\n        minWidth: 120\n      },\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        children: \"Available Tests\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        style: {\n          minWidth: 240\n        },\n        size: \"small\",\n        value: value,\n        label: \"Age\",\n        onChange: e => onChange(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"\",\n          children: /*#__PURE__*/_jsxDEV(\"em\", {\n            children: \"None\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), testList.map(e => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: e,\n          children: e\n        }, e, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 30\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 3\n    }, this)\n  }, void 0, false);\n}\n\n_c = TestSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestSelect\");","map":{"version":3,"sources":["/home/miltonejones/projects/puppet-heartbeat/src/components/SocketSender.js"],"names":["React","Button","Stack","Typography","Box","LinearProgress","Collapse","Divider","InputLabel","MenuItem","FormHelperText","FormControl","Select","Grid","Stepper","Step","StepLabel","Card","SocketCard","PlayCircle","Sync","SOCKET_URI","client","WebSocket","SocketSender","Component","constructor","props","state","connected","ws","data","showTextbox","outcomes","openListener","bind","messageListener","closeListener","sendCommand","onComplete","alert","msg","json","JSON","parse","available","steps","socketData","setState","tests","split","message","s3Location","concat","complete","console","log","readyState","logout","retryConnection","sendMessage","action","type","send","stringify","id","clicked","downloadIndex","setTimeout","mountClient","componentWillUnmount","addEventListener","componentDidMount","render","thumbnail","activeStep","progress","currentTest","execRunning","execDisabled","headerText","ButtonIcon","buttonClass","flexGrow","e","mr","ml","minHeight","textAlign","width","height","map","label","index","length","mt","mb","outcome","i","TestSelect","testList","value","onChange","m","minWidth","target"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n  Button,\r\n  Stack,\r\n  Typography,\r\n  Box,\r\n  LinearProgress,\r\n  Collapse,\r\n  Divider \r\n} from '@mui/material';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormHelperText from '@mui/material/FormHelperText';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\nimport Grid from '@mui/material/Grid';\r\nimport Stepper from '@mui/material/Stepper';\r\nimport Step from '@mui/material/Step';\r\nimport StepLabel from '@mui/material/StepLabel';\r\nimport Card from '@mui/material/Card';\r\nimport SocketCard from './SocketCard';\r\nimport { PlayCircle, Sync }  from '@mui/icons-material';\r\n// import StepContent from '@mui/material/StepContent';\r\n\r\nconst SOCKET_URI =\r\n  'wss://2zoxhl25v2.execute-api.us-east-1.amazonaws.com/production';\r\n\r\nlet client = new WebSocket(SOCKET_URI);\r\n\r\nclass SocketSender extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      connected: false,\r\n      ws: null,\r\n      data: null,\r\n      showTextbox: true,\r\n      outcomes: [],\r\n    };\r\n    this.openListener = this.openListener.bind(this);\r\n    this.messageListener = this.messageListener.bind(this);\r\n    this.closeListener = this.closeListener.bind(this);\r\n    this.sendCommand = this.sendCommand.bind(this);\r\n  }\r\n\r\n  onComplete() {\r\n    alert('DONE!');\r\n  }\r\n\r\n  messageListener(msg) {\r\n    const { data } = msg;\r\n    const json = JSON.parse(data);\r\n    // if (!(json?.available || json?.message)) return console.log(json);\r\n    const { available, steps, data: socketData } = json;\r\n\r\n    // console.log({ json });\r\n    !!json &&\r\n      !!available &&\r\n      this.setState({ ...json, tests: available?.split(',') });\r\n    !!json &&\r\n      !!steps &&\r\n      this.setState({ ...json, outcomes: [], steps: steps?.split(',') });\r\n    !!json && !!socketData?.message && this.setState({ ...socketData });\r\n    !!socketData?.s3Location &&\r\n      this.setState({\r\n        ...this.state,\r\n        outcomes: this.state.outcomes.concat(socketData),\r\n      });\r\n    !!json.complete && this.onComplete();\r\n  }\r\n\r\n  closeListener() {\r\n    console.log('You are disconnected.');\r\n    this.setState({\r\n      connected: false,\r\n      ws: null,\r\n      readyState: client.readyState,\r\n    });\r\n    if (this.state.logout) {\r\n      return console.log('Reconnection will not be attempted');\r\n    }\r\n    this.retryConnection();\r\n  }\r\n\r\n  openListener() {\r\n    console.log('You are connected');\r\n    this.setState({ ws: client, connected: true });\r\n    this.sendMessage({\r\n      action: 'introduce',\r\n      data: {\r\n        type: 'agent',\r\n      },\r\n    });\r\n  }\r\n\r\n  sendMessage(json) {\r\n    console.log('sending', json);\r\n    client.send(JSON.stringify(json));\r\n  }\r\n\r\n  sendCommand(id) {\r\n    this.sendMessage({\r\n      action: 'exec',\r\n      data: {\r\n        id,\r\n      },\r\n    });\r\n    this.setState({ clicked: 1, complete: !1, downloadIndex: 0 });\r\n  }\r\n\r\n  retryConnection() {\r\n    setTimeout(() => {\r\n      console.log('Retrying connection...');\r\n      client = new WebSocket(SOCKET_URI);\r\n      this.mountClient();\r\n    }, 5000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log('Disconnecting.');\r\n    this.sendMessage({\r\n      action: 'disconnect',\r\n    });\r\n  }\r\n\r\n  mountClient() {\r\n    client.addEventListener('open', this.openListener);\r\n    client.addEventListener('message', this.messageListener);\r\n    client.addEventListener('close', this.closeListener);\r\n  }\r\n  componentDidMount() {\r\n    this.mountClient();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      tests,\r\n      message,\r\n      thumbnail,\r\n      steps,\r\n      activeStep = 0,\r\n      progress,\r\n      outcomes,\r\n      connected,currentTest\r\n    } = this.state;\r\n    const execRunning = !!progress && progress < 100;\r\n    const execDisabled = !currentTest || execRunning\r\n    const headerText = !connected\r\n      ? 'Waiting to connect...'\r\n      : 'Select a test to run.';\r\n    const ButtonIcon = execRunning ? Sync : PlayCircle;\r\n    const buttonClass = execRunning ? 'spin' : '';\r\n    return (\r\n      <>\r\n        <Box className=\"card-body flex\">\r\n          <Box ml={2}>{headerText}</Box>\r\n          <Box sx={{ flexGrow: 1 }} />\r\n          <TestSelect\r\n            value={currentTest}\r\n            onChange={e => this.setState({currentTest: e})}\r\n            testList={tests}\r\n          />\r\n         <Button onClick={() => this.sendCommand(currentTest)} disabled={execDisabled} \r\n         sx={{mr: 3}} variant=\"contained\" color=\"error\"\r\n         >Run <ButtonIcon className={buttonClass} sx={{ml: 1}} /></Button>\r\n          <hr />\r\n        </Box>\r\n        <Card className=\"card-body\" sx={{ minHeight: 300 }}>\r\n          <Grid container>\r\n            <Grid item xs={12}>\r\n              <Typography>\r\n                \r\n              </Typography>\r\n              </Grid>\r\n            <Grid\r\n              item\r\n              className=\"flex center middle\"\r\n              xs={5}\r\n              sx={{ textAlign: 'center' }}\r\n            >\r\n              {!steps && (\r\n                <Typography mt={4} variant=\"subtitle1\">\r\n                  No test is loaded.\r\n                </Typography>\r\n              )}\r\n              {!!steps && !thumbnail && (\r\n                <Typography mt={4} variant=\"subtitle1\">\r\n                  Waiting for first image...\r\n                </Typography>\r\n              )}\r\n              {!!thumbnail && (\r\n                <Stack mt={4} className=\"preview-stack\">\r\n                  <Box className=\"preview-head\">\r\n                    <Box className=\"dot\" />\r\n                    <Box className=\"dot green\" />\r\n                    <Box className=\"dot gold\" />\r\n                    <Typography ml={1} variant=\"caption\">\r\n                      Test Preview\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box className=\"preview-body\">\r\n                    <img\r\n                      style={{ width: 300, height: 168 }}\r\n                      src={'data:image/png;base64,' + thumbnail}\r\n                      alt=\"thumb\"\r\n                    />\r\n                  </Box>\r\n                </Stack>\r\n              )}\r\n            </Grid>\r\n            <Grid item pt={5} xs={2}>\r\n              <Stepper mt={5} activeStep={activeStep} orientation=\"vertical\">\r\n                {steps?.map((label, index) => (\r\n                  <Step key={label}>\r\n                    <StepLabel>{label}</StepLabel>\r\n                  </Step>\r\n                ))}\r\n              </Stepper>\r\n            </Grid>\r\n            <Grid item p={5} xs={5}>\r\n              {message}\r\n\r\n              {!!progress && (\r\n                <Box mt={6}>\r\n                  <LinearProgress variant=\"determinate\" value={progress} />\r\n                </Box>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n          {!!outcomes.length && (\r\n            <Collapse in={progress > 95}>\r\n              <Divider sx={{mt: 4, mb: 4}}>Test Results</Divider>\r\n\r\n              <Box className=\"auto-grid\">\r\n                {outcomes.map((outcome, i) => (\r\n                  <SocketCard key={i} {...outcome} />\r\n                ))}\r\n              </Box>\r\n            </Collapse>\r\n          )}\r\n        </Card>\r\n        {/* {JSON.stringify(outcomes)} */}\r\n        {/* <h1>{message}</h1>\r\n        [[{steps}]]\r\n        {JSON.stringify(outcomes)}\r\n        {thumbnail} */}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SocketSender;\r\n\r\nfunction TestSelect ({testList, value ,onChange}) {\r\n  if (!testList) return <i />\r\n  return (<>\r\n  \r\n  <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n        <InputLabel >Available Tests</InputLabel>\r\n        <Select  \r\n        style={{minWidth: 240}}\r\n        size=\"small\"\r\n          value={value}\r\n          label=\"Age\"\r\n          onChange={e => onChange(e.target.value)}\r\n        >\r\n          <MenuItem value=\"\">\r\n            <em>None</em>\r\n          </MenuItem>\r\n          {testList.map(e => <MenuItem value={e} key={e}>{e}</MenuItem>)}\r\n         \r\n        </Select> \r\n      </FormControl>\r\n\r\n\r\n  </>)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}